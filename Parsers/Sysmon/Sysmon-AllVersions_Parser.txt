// KQL Sysmon Event Parser
// Last Updated Date: September 28, 2022
// Sysmon Version: Applicable to all versions
//
// Sysmon Instructions:
// If you want to print configuration schema definition of sysmon. Execute below command from command shell or powershell terminal
// Sysmon.exe -s
//
// You can further customize config XML definition and install sysmon with it via below command. 
// Sample Sysmon config XML from Swift on Security's GitHub page : https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml
// Sysmon.exe -i sysmonconfig-export.xml -accepteula -h sha1,md5,sha256 -n -l  
// -n : Log all network connections and -l: log loading of modules.
//
// Parser Notes:
// This parser works against all versions unless original event manifest is changed
// 
//
// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. Sysmon_Normalized).
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Sysmon_Normalized | take 10).
// Reference :
// Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381
//
Event
| where Source == "Microsoft-Windows-Sysmon"
| extend RenderedDescription = tostring(split(RenderedDescription, ":")[0])
| extend EventData = parse_xml(EventData).DataItem.EventData.Data
| mv-expand bagexpansion=array EventData
| evaluate bag_unpack(EventData)
| extend Key = tostring(column_ifexists('@Name', "")), Value = column_ifexists('#text', "")
| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)
| extend TimeGenerated = column_ifexists("TimeGenerated", ""), Source = column_ifexists("Source", ""), EventLog = column_ifexists("EventLog", ""), Computer = column_ifexists("Computer", ""), 
EventLevel = column_ifexists("EventLevel", ""), EventLevelName = column_ifexists("EventLevelName", ""), EventID = column_ifexists("EventID", ""), UserName = column_ifexists("UserName", ""), 
RenderedDescription = column_ifexists("RenderedDescription", ""), MG = column_ifexists("MG", ""), ManagementGroupName = column_ifexists("ManagementGroupName", ""), Type = column_ifexists("Type", ""), 
_ResourceId = column_ifexists("_ResourceId", ""), Archived = column_ifexists("Archived", ""), CallTrace = column_ifexists("CallTrace", ""), CommandLine = column_ifexists("CommandLine", ""), 
Company = column_ifexists("Company", ""), CreationUtcTime = column_ifexists("CreationUtcTime", ""), CurrentDirectory = column_ifexists("CurrentDirectory", ""), Description = column_ifexists("Description", ""), 
DestinationHostname = column_ifexists("DestinationHostname", ""), DestinationIp = column_ifexists("DestinationIp", ""), DestinationIsIpv6 = column_ifexists("DestinationIsIpv6", ""), 
DestinationPort = column_ifexists("DestinationPort", ""), DestinationPortName = column_ifexists("DestinationPortName", ""), Details = column_ifexists("Details", ""), Device = column_ifexists("Device", ""), 
EventType = column_ifexists("EventType", ""), FileVersion = column_ifexists("FileVersion", ""), GrantedAccess = column_ifexists("GrantedAccess", ""), Hashes = column_ifexists("Hashes", ""), 
Image = column_ifexists("Image", ""), ImageLoaded = column_ifexists("ImageLoaded", ""), Initiated = column_ifexists("Initiated", ""), IntegrityLevel = column_ifexists("IntegrityLevel", ""), 
IsExecutable = column_ifexists("IsExecutable", ""), LogonGuid = column_ifexists("LogonGuid", ""), LogonId = column_ifexists("LogonId", ""), NewThreadId = column_ifexists("NewThreadId", ""), 
OriginalFileName = column_ifexists("OriginalFileName", ""), ParentCommandLine = column_ifexists("ParentCommandLine", ""), ParentImage = column_ifexists("ParentImage", ""), 
ParentProcessGuid = column_ifexists("ParentProcessGuid", ""), ParentProcessId = column_ifexists("ParentProcessId", ""), PipeName = column_ifexists("PipeName", ""), 
PreviousCreationUtcTime = column_ifexists("PreviousCreationUtcTime", ""), ProcessGuid = column_ifexists("ProcessGuid", ""), ProcessId = column_ifexists("ProcessId", ""), Product = column_ifexists("Product", ""), 
Protocol = column_ifexists("Protocol", ""), QueryName = column_ifexists("QueryName", ""), QueryResults = column_ifexists("QueryResults", ""), QueryStatus = column_ifexists("QueryStatus", ""), 
RuleName = column_ifexists("RuleName", ""), Signature = column_ifexists("Signature", ""), SignatureStatus = column_ifexists("SignatureStatus", ""), Signed = column_ifexists("Signed", ""), 
SourceHostname = column_ifexists("SourceHostname", ""), SourceImage = column_ifexists("SourceImage", ""), SourceIp = column_ifexists("SourceIp", ""), SourceIsIpv6 = column_ifexists("SourceIsIpv6", ""), 
SourcePort = column_ifexists("SourcePort", ""), SourcePortName = column_ifexists("SourcePortName", ""), SourceProcessGuid = column_ifexists("SourceProcessGuid", ""), SourceProcessGUID = column_ifexists("SourceProcessGUID", ""), 
SourceProcessId = column_ifexists("SourceProcessId", ""), SourceThreadId = column_ifexists("SourceThreadId", ""), StartAddress = column_ifexists("StartAddress", ""), StartFunction = column_ifexists("StartFunction", ""), 
StartModule = column_ifexists("StartModule", ""), TargetFilename = column_ifexists("TargetFilename", ""), TargetImage = column_ifexists("TargetImage", ""), TargetObject = column_ifexists("TargetObject", ""), 
TargetProcessGuid = column_ifexists("TargetProcessGuid", ""), TargetProcessGUID = column_ifexists("TargetProcessGUID", ""), TargetProcessId = column_ifexists("TargetProcessId", ""), TerminalSessionId = column_ifexists("TerminalSessionId", ""), 
User = column_ifexists("User", ""), UtcTime = column_ifexists("UtcTime", ""), TechniqueId = column_ifexists("TechniqueId", ""), TechniqueName = column_ifexists("TechniqueName", "")
| parse RuleName with * 'technique_id=' TechniqueId ',' * 'technique_name=' TechniqueName
| project TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId, 
Archived, CallTrace, CommandLine, Company, CreationUtcTime, CurrentDirectory, Description, DestinationHostname, DestinationIp, DestinationIsIpv6, DestinationPort, DestinationPortName, 
Details, Device, EventType, FileVersion, GrantedAccess, Hashes, Image, ImageLoaded, Initiated, IntegrityLevel, IsExecutable, LogonGuid, LogonId, NewThreadId, OriginalFileName, 
ParentCommandLine, ParentImage, ParentProcessGuid, ParentProcessId, PipeName, PreviousCreationUtcTime, ProcessGuid, ProcessId, Product, Protocol, QueryName, QueryResults, QueryStatus,  
 RuleName, Signature, SignatureStatus, Signed, SourceHostname, SourceImage, SourceIp, SourceIsIpv6, SourcePort, SourcePortName, SourceProcessGuid, SourceProcessGUID, SourceProcessId, 
 SourceThreadId, StartAddress, StartFunction, StartModule, TargetFilename, TargetImage, TargetObject, TargetProcessGuid, TargetProcessGUID, TargetProcessId, TerminalSessionId, User, 
 UtcTime, TechniqueId, TechniqueName
